# ===========================================
# GitHub Actions Workflow Bump Version
# -------------------------------------------
# Automatically bumps the version number
# after a new version is published.
# It determines the next semantic version, updates
# version files on both main and demo branches,
# and commits the changes back to the repository.
# ===========================================

name: bump-version

on:
  release:
    types: [published]   # Trigger on GitHub release publish

  workflow_dispatch:
    inputs:
      tag:
        description: 'Release tag (e.g. v1.1)'
        required: false    # Optional manual trigger

permissions:
  contents: write       # Needed to push commits back

jobs:
  bump-version:
    runs-on: windows-latest

    steps:
      # 1. Checkout the repository with full history to allow pushing commits
      - name: Checkout repo
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      # 2. Determine the tag/version to use, support multiple trigger sources
      - name: Set version vars
        shell: pwsh
        env:
          MANUAL_TAG: ${{ github.event.inputs.tag }}
          RELEASE_TAG: ${{ github.event.release.tag_name }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Determine the tag to use
          $tag = $null
          
          if ($env:MANUAL_TAG -and $env:MANUAL_TAG -ne '') {
              # Manual trigger input
              Write-Host "Using manual tag: $env:MANUAL_TAG"
              $tag = $env:MANUAL_TAG
          } else {
              # Query GitHub API for latest release
              Write-Host "Fetching latest release tag from GitHub API..."
              $headers = @{ Authorization = "Bearer $env:GITHUB_TOKEN" }
              $url = "https://api.github.com/repos/${{ github.repository }}/releases/latest"
              try {
                  $response = Invoke-RestMethod -Uri $url -Headers $headers
                  if ($response.tag_name) {
                      $tag = $response.tag_name
                      Write-Host "Using latest release tag: $tag"
                  }
              }
              catch {
                  Write-Warning "Failed to fetch latest release: $_"
              }
              
          }
          
          if (-not $tag) {
              Write-Error "No tag could be determined."
              exit 1
          }

          # Remove leading "v" if present
          $version = "$($tag.TrimStart('v')).0"
          Write-Host "Using tag: $tag"
          Write-Host "Current version: $version"

          # Calculate NEXT_VERSION: increment minor, roll over major if minor >= 9
          $parts = $version.Split('.')
          $major = [int]$parts[0]
          $minor = [int]$parts[1]

          if ($minor -lt 9) {
              $minor++
          } else {
              $major++
              $minor = 0
          }
          $next_version = "$major.$minor.0"
          Write-Host "Next version: $next_version"

          # Persist variables for later steps
          "TAG=$tag" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          "VERSION=$version" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          "NEXT_VERSION=$next_version" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

      # 3. Bump version on main branch
      - name: Bump version on main branch
        shell: pwsh
        run: |
          git checkout main

          git fetch origin main
          git reset --hard origin/main  # reset local main to match remote

          # Ensure PowerShell scripts have execution permissions
          git update-index --chmod=+x ./__scripts/bump-version.ps1

          # Run your PowerShell script to update version numbers
          ./__scripts/bump-version.ps1 $env:NEXT_VERSION

          # Configure Git for automated commit
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          # Only commit if there are changes to avoid empty commits
          if (git diff --quiet) {
              Write-Host "No changes detected, skipping commit."
          } else {
              git add --all
              git commit -m "chore: bump version from $env:VERSION to $env:NEXT_VERSION"
              git push origin main
          }

      # 4. Bump version on demo branch
      - name: Bump version on demo branch
        shell: pwsh
        run: |
          git fetch origin demo:demo
          git checkout demo
          git reset --hard origin/demo  # reset local demo to match remote

          # Ensure PowerShell scripts have execution permissions
          git update-index --chmod=+x ./__scripts/bump-version.ps1
          
          # Run version bump script
          ./__scripts/bump-version.ps1 $env:NEXT_VERSION

          # Configure Git
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          # Commit only if there are changes
          if (git diff --quiet) {
              Write-Host "No changes detected on demo branch, skipping commit."
          } else {
              git add --all
              git commit -m "chore: bump version from $env:VERSION to $env:NEXT_VERSION"
              git push origin demo
          }
